syntax = "proto3";

package saser.pdp.tasks.v1;

import "google/protobuf/field_mask.proto";

service Tasks {
  // Gets a single task.
  rpc GetTask(GetTaskRequest) returns (Task);

  // Lists tasks.
  rpc ListTasks(ListTasksRequest) returns (ListTasksResponse);

  // Creates a task.
  rpc CreateTask(CreateTaskRequest) returns (Task);

  // Updates a task.
  rpc UpdateTask(UpdateTaskRequest) returns (Task);

  // Soft deletes a task (i.e., sets its `deleted` field to true).
  rpc DeleteTask(DeleteTaskRequest) returns (Task);

  // Modifies the completion status of a task. The returned task contains the state after any
  // update.
  rpc SetCompleted(SetCompletedRequest) returns (SetCompletedResponse);

  // Lists the dependencies of a task.
  rpc ListDependencies(ListDependenciesRequest) returns (ListDependenciesResponse);

  // List the dependants of a task, i.e., tasks that depend on the given task.
  rpc ListDependants(ListDependantsRequest) returns (ListDependantsResponse);

  // Sets whether a source task depends on a destination task. If a dependency is created that
  // creates a dependency cycle, `SetDependency` returns an error.
  rpc SetDependency(SetDependencyRequest) returns (SetDependencyResponse);
}

////////////////////////
// Resource definitions.
////////////////////////

// Represents something that requires some action to be completed.
message Task {
  // The resource name of the task.
  // Format: tasks/{task}
  string name = 1;

  // Whether this task has been deleted.
  // Output only. Call `DeleteTask` to mark a task as deleted.
  bool deleted = 2;

  // The title of the task, as it would be displayed in a list of tasks. Should be short.
  // Required.
  string title = 3;

  // Whether this task is completed.
  // Output only. This field can only be updated by calling `SetCompleted`.
  bool completed = 4;
}

/////////////////////////////////
// Request and response messages.
/////////////////////////////////

message GetTaskRequest {
  // The name of the task to get.
  string name = 1;
}

message ListTasksRequest {
  // The maximum number of tasks to return. If unset, the server will choose a reasonable default
  // number. Note that the server may return fewer tasks than `page_size` specifies.
  int32 page_size = 1;

  // A token supplied by a previous call to `ListTasks`. If empty, the first page of results will be
  // returned.
  string page_token = 2;
}

message ListTasksResponse {
  // The tasks.
  repeated Task tasks = 1;

  // A token to be supplied as the `page_token` in a subsequent call to `ListTasks`. If empty then
  // there are no more results to return.
  string next_page_token = 2;
}

message CreateTaskRequest {
  // The task to create. The `name` field will be ignored -- it will be set by the server on the
  // returned task.
  Task task = 1;
}

message UpdateTaskRequest {
  // The task as it should be defined after the update, subject to `update_mask`. The `name` field
  // will be used to identify which task to update.
  Task task = 1;

  // Which fields of the task to update. If unspecified then the entire task will be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteTaskRequest {
  // The name of the task to be deleted.
  string name = 1;
}

message SetCompletedRequest {
  // The name of the task to update.
  string name = 1;

  // The desired completion state of the task.
  bool completed = 2;
}

message SetCompletedResponse {
  // The task after any updates.
  Task task = 1;

  // Whether the task was updated as a result of this call to `SetCompleted`.
  bool updated = 2;
}

message ListDependenciesRequest {
  // The name of the task to list dependencies for.
  string name = 1;
}

message ListDependenciesResponse {
  // The names of the tasks that the given task depends on.
  repeated string dependencies = 1;
}

message ListDependantsRequest {
  // The name of the task to list dependants for.
  string name = 1;
}

message ListDependantsResponse {
  // The names of the tasks that depend on the given task.
  repeated string dependants = 1;
}

message SetDependencyRequest {
  // The name of the task that is the source of the dependency, i.e., the task that depends on
  // another task.
  string source = 1;

  // The name of the task that is the destination of the dependency, i.e., the task is depended on
  // by the `source` task.
  string destination = 2;

  // Whether the dependency from `source` to `destination` should exist.
  bool blocking = 3;
}

message SetDependencyResponse {
  // Whether the dependency from `source` to `destination` was updated (i.e., created when
  // previously missing, or deleted when previously existing).
  bool updated = 1;
}
